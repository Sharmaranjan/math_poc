// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: math.proto

#include "math.pb.h"
#include "math.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MathServerService_method_names[] = {
  "/MathServerService/Add",
};

std::unique_ptr< MathServerService::Stub> MathServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MathServerService::Stub> stub(new MathServerService::Stub(channel, options));
  return stub;
}

MathServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Add_(MathServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MathServerService::Stub::Add(::grpc::ClientContext* context, const ::MathServerRequest& request, ::MathServerReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MathServerRequest, ::MathServerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_, context, request, response);
}

void MathServerService::Stub::async::Add(::grpc::ClientContext* context, const ::MathServerRequest* request, ::MathServerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MathServerRequest, ::MathServerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void MathServerService::Stub::async::Add(::grpc::ClientContext* context, const ::MathServerRequest* request, ::MathServerReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MathServerReply>* MathServerService::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::MathServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MathServerReply, ::MathServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MathServerReply>* MathServerService::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::MathServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

MathServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathServerService::Service, ::MathServerRequest, ::MathServerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MathServerRequest* req,
             ::MathServerReply* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
}

MathServerService::Service::~Service() {
}

::grpc::Status MathServerService::Service::Add(::grpc::ServerContext* context, const ::MathServerRequest* request, ::MathServerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MathClientService_method_names[] = {
  "/MathClientService/UpdateTime",
};

std::unique_ptr< MathClientService::Stub> MathClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MathClientService::Stub> stub(new MathClientService::Stub(channel, options));
  return stub;
}

MathClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateTime_(MathClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MathClientService::Stub::UpdateTime(::grpc::ClientContext* context, const ::MathClientRequest& request, ::MathClientRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MathClientRequest, ::MathClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateTime_, context, request, response);
}

void MathClientService::Stub::async::UpdateTime(::grpc::ClientContext* context, const ::MathClientRequest* request, ::MathClientRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MathClientRequest, ::MathClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTime_, context, request, response, std::move(f));
}

void MathClientService::Stub::async::UpdateTime(::grpc::ClientContext* context, const ::MathClientRequest* request, ::MathClientRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MathClientRequest>* MathClientService::Stub::PrepareAsyncUpdateTimeRaw(::grpc::ClientContext* context, const ::MathClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MathClientRequest, ::MathClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MathClientRequest>* MathClientService::Stub::AsyncUpdateTimeRaw(::grpc::ClientContext* context, const ::MathClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

MathClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MathClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MathClientService::Service, ::MathClientRequest, ::MathClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MathClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MathClientRequest* req,
             ::MathClientRequest* resp) {
               return service->UpdateTime(ctx, req, resp);
             }, this)));
}

MathClientService::Service::~Service() {
}

::grpc::Status MathClientService::Service::UpdateTime(::grpc::ServerContext* context, const ::MathClientRequest* request, ::MathClientRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


